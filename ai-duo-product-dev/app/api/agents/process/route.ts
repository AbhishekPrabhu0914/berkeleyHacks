import type { NextRequest } from "next/server"
import { createClient } from "@supabase/supabase-js"

// Initialize Supabase client
const supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.SUPABASE_SERVICE_ROLE_KEY!)

interface AgentMessage {
  id: string
  agent: "swe" | "pm"
  content: string
  timestamp: Date
  approved?: boolean
}

// Mock AI agent responses - In production, this would integrate with Letta AI and Gemini
class AIAgentOrchestrator {
  private sessionId: string
  private requirement: string
  private messages: AgentMessage[] = []
  private iterationCount = 0
  private maxIterations = 4

  constructor(sessionId: string, requirement: string) {
    this.sessionId = sessionId
    this.requirement = requirement
  }

  async *processRequirement() {
    // Store initial requirement in database
    await this.storeSession()

    // Start with SWE Agent proposal
    yield* this.sweAgentProposal()

    // Iterative loop between PM and SWE
    while (this.iterationCount < this.maxIterations) {
      const pmFeedback = await this.pmAgentReview()
      yield pmFeedback

      if (pmFeedback.approved) {
        // PM approved - generate final result
        const finalResult = this.generateFinalResult()
        yield { type: "complete", result: finalResult }
        break
      }

      // PM wants changes - SWE responds
      if (this.iterationCount < this.maxIterations - 1) {
        yield* this.sweAgentRevision(pmFeedback.content)
      }

      this.iterationCount++
    }

    // If max iterations reached, force completion
    if (this.iterationCount >= this.maxIterations) {
      const finalResult = this.generateFinalResult()
      yield { type: "complete", result: finalResult }
    }
  }

  private async *sweAgentProposal() {
    await this.delay(1000)

    const proposals = [
      `Based on your requirement for "${this.requirement}", I propose the following technical implementation:

**Architecture Overview:**
- Frontend: React/Next.js with TypeScript
- Backend: Node.js/Express API
- Database: PostgreSQL with proper indexing
- Authentication: JWT with refresh tokens

**Key Features:**
1. User registration/login system
2. Social OAuth integration (Google, GitHub)
3. Password reset functionality
4. Session management
5. Role-based access control

**Security Measures:**
- Password hashing with bcrypt
- Rate limiting on auth endpoints
- CSRF protection
- Input validation and sanitization

**Implementation Timeline:**
- Week 1: Core auth system
- Week 2: Social login integration
- Week 3: Security hardening and testing

Would you like me to elaborate on any specific aspect?`,

      `For the requirement "${this.requirement}", here's my technical approach:

**System Design:**
- Microservices architecture for scalability
- Redis for session storage and caching
- Docker containerization for deployment
- CI/CD pipeline with automated testing

**Core Components:**
1. Authentication Service
2. User Management Service  
3. Authorization Middleware
4. Audit Logging System

**Database Schema:**
- Users table with encrypted PII
- Sessions table with TTL
- Audit logs for compliance
- Role permissions mapping

**API Endpoints:**
- POST /auth/register
- POST /auth/login
- POST /auth/refresh
- DELETE /auth/logout
- GET /auth/profile

This approach ensures scalability and maintainability. Thoughts?`,
    ]

    const message: AgentMessage = {
      id: Date.now().toString(),
      agent: "swe",
      content: proposals[Math.floor(Math.random() * proposals.length)],
      timestamp: new Date(),
    }

    this.messages.push(message)
    await this.storeMessage(message)
    yield { type: "message", message }
  }

  private async pmAgentReview(): Promise<AgentMessage & { approved: boolean }> {
    await this.delay(1500)

    const reviews = [
      {
        content: `I've reviewed the SWE proposal and have several concerns:

**Positive Aspects:**
‚úÖ Good security considerations with bcrypt and rate limiting
‚úÖ Comprehensive feature set covering core requirements

**Areas for Improvement:**
‚ùå Missing user experience considerations - what about password strength indicators?
‚ùå No mention of accessibility compliance (WCAG guidelines)
‚ùå Social login UX flow needs clarification - what happens on first-time social users?
‚ùå Error handling strategy is unclear - how do we communicate failures to users?

**Product Requirements:**
- Add progressive enhancement for users without JavaScript
- Include user onboarding flow design
- Specify mobile responsiveness requirements
- Add analytics tracking for conversion optimization

Please revise with focus on user experience and product metrics.`,
        approved: false,
      },
      {
        content: `Great technical foundation! I have some product-focused feedback:

**Strengths:**
‚úÖ Solid security architecture
‚úÖ Clear implementation timeline

**Product Enhancements Needed:**
‚ùå User journey mapping is missing - what's the complete flow?
‚ùå No mention of user feedback collection during auth process
‚ùå Missing A/B testing strategy for conversion optimization
‚ùå What about users who forget which social provider they used?

**Business Requirements:**
- Add user analytics and conversion tracking
- Include user support/help system
- Plan for internationalization (i18n)
- Consider GDPR compliance for EU users

Let's iterate on the user-centric aspects while maintaining your solid technical approach.`,
        approved: false,
      },
      {
        content: `Excellent work! This proposal addresses our requirements comprehensively.

**What I Love:**
‚úÖ Security-first approach with proper encryption
‚úÖ Scalable architecture that can grow with our user base
‚úÖ Clear implementation timeline with realistic milestones
‚úÖ Comprehensive API design
‚úÖ Good consideration of edge cases

**Minor Suggestions:**
- Consider adding user preference management
- Maybe include basic user profile customization

**Approval Status:** ‚úÖ APPROVED

This solution balances technical excellence with user needs. The security measures are robust, the architecture is scalable, and the implementation plan is realistic. Let's proceed with this approach!`,
        approved: true,
      },
    ]

    const review = reviews[Math.min(this.iterationCount, reviews.length - 1)]

    const message: AgentMessage = {
      id: Date.now().toString(),
      agent: "pm",
      content: review.content,
      timestamp: new Date(),
      approved: review.approved,
    }

    this.messages.push(message)
    await this.storeMessage(message)
    return { ...message, approved: review.approved }
  }

  private async *sweAgentRevision(pmFeedback: string) {
    await this.delay(1200)

    const revisions = [
      `Thank you for the valuable feedback! Here's my revised approach addressing your concerns:

**Enhanced User Experience Design:**

**1. Password Strength & UX:**
- Real-time password strength indicator with visual feedback
- Progressive disclosure of password requirements
- Accessible color coding (not just red/green) with icons

**2. Social Login UX Flow:**
- Clear provider selection with brand recognition
- First-time social users get guided profile completion
- Account linking flow for existing email matches
- "Remember my choice" for preferred social provider

**3. Accessibility & Progressive Enhancement:**
- WCAG 2.1 AA compliance throughout
- Works without JavaScript (server-side form handling)
- Screen reader optimized with proper ARIA labels
- Keyboard navigation support

**4. Error Handling & Communication:**
- User-friendly error messages (no technical jargon)
- Contextual help tooltips
- Recovery suggestions for common issues
- Graceful degradation for network issues

**5. Mobile-First Responsive Design:**
- Touch-friendly interface elements
- Optimized for various screen sizes
- Fast loading with critical CSS inlining

**6. Analytics & Optimization:**
- Conversion funnel tracking
- A/B testing framework for auth flows
- User behavior analytics (privacy-compliant)

How does this enhanced approach look?`,

      `Great feedback! Here's my updated solution incorporating your product insights:

**User-Centric Enhancements:**

**1. Complete User Journey Mapping:**
- Landing ‚Üí Registration ‚Üí Email Verification ‚Üí Onboarding ‚Üí Dashboard
- Social Login ‚Üí Profile Completion ‚Üí Preference Setting ‚Üí Welcome Tour
- Password Reset ‚Üí Security Questions ‚Üí Success Confirmation

**2. User Support & Help System:**
- Contextual help bubbles throughout the flow
- FAQ integration within auth forms
- Live chat widget for immediate assistance
- Self-service account recovery options

**3. Internationalization & Compliance:**
- Multi-language support (starting with EN, ES, FR)
- GDPR-compliant consent management
- Regional privacy law compliance (CCPA, etc.)
- Localized validation messages

**4. Advanced User Features:**
- User preference dashboard
- Account security center
- Login history and device management
- Two-factor authentication options

**5. Business Intelligence:**
- Conversion rate optimization tools
- User segmentation for targeted improvements
- Retention analysis and re-engagement flows
- Performance monitoring and alerting

**6. Edge Case Handling:**
- Social provider account conflicts resolution
- Duplicate account detection and merging
- Graceful handling of service outages
- Data portability and account deletion

This revision balances technical robustness with exceptional user experience. Ready for your review!`,
    ]

    const message: AgentMessage = {
      id: Date.now().toString(),
      agent: "swe",
      content: revisions[Math.floor(Math.random() * revisions.length)],
      timestamp: new Date(),
    }

    this.messages.push(message)
    await this.storeMessage(message)
    yield { type: "message", message }
  }

  private generateFinalResult(): string {
    return `üéâ **FINAL APPROVED SOLUTION**

After ${this.iterationCount + 1} rounds of collaboration, we've developed a comprehensive solution for: "${this.requirement}"

**‚úÖ Technical Excellence:**
- Secure, scalable architecture
- Modern tech stack with best practices
- Comprehensive API design
- Robust security measures

**‚úÖ User Experience Focus:**
- Accessibility-compliant design
- Mobile-first responsive interface
- Intuitive user flows
- Progressive enhancement

**‚úÖ Product Requirements:**
- Analytics and optimization ready
- Internationalization support
- GDPR compliance
- Comprehensive error handling

**‚úÖ Business Value:**
- Clear implementation timeline
- Scalable for growth
- Conversion optimization built-in
- User support integration

**Next Steps:**
1. Technical specification documentation
2. UI/UX mockups and prototypes
3. Development sprint planning
4. Testing and QA strategy

This solution successfully balances technical robustness with exceptional user experience, ensuring both engineering excellence and product success.`
  }

  private async storeSession() {
    await supabase.from("ai_sessions").insert({
      id: this.sessionId,
      requirement: this.requirement,
      status: "in-progress",
      created_at: new Date().toISOString(),
    })
  }

  private async storeMessage(message: AgentMessage) {
    await supabase.from("ai_messages").insert({
      session_id: this.sessionId,
      agent: message.agent,
      content: message.content,
      approved: message.approved || false,
      created_at: message.timestamp.toISOString(),
    })
  }

  private delay(ms: number): Promise<void> {
    return new Promise((resolve) => setTimeout(resolve, ms))
  }
}

export async function POST(request: NextRequest) {
  try {
    const { requirement, sessionId } = await request.json()

    if (!requirement || !sessionId) {
      return new Response("Missing required fields", { status: 400 })
    }

    const orchestrator = new AIAgentOrchestrator(sessionId, requirement)

    const encoder = new TextEncoder()
    const stream = new ReadableStream({
      async start(controller) {
        try {
          for await (const event of orchestrator.processRequirement()) {
            const data = `data: ${JSON.stringify(event)}\n\n`
            controller.enqueue(encoder.encode(data))
          }
        } catch (error) {
          console.error("Stream error:", error)
        } finally {
          controller.close()
        }
      },
    })

    return new Response(stream, {
      headers: {
        "Content-Type": "text/event-stream",
        "Cache-Control": "no-cache",
        Connection: "keep-alive",
      },
    })
  } catch (error) {
    console.error("API error:", error)
    return new Response("Internal server error", { status: 500 })
  }
}
